' ================== Module: Owls_ToPDF_Auto.bas ==================
' Paste this into a standard module and run:  Entity_DBA_Trade_AKA_FKA_Name_ALL
' Office 365, pure VBA, no references. Uses Edge/Chrome DevTools Protocol.

Option Explicit

' ---------- CHANGE THESE IF NEEDED ----------
Private Const SHEET_NAME As String = "Dashboard"
Private Const NAMES_ROW As Long = 11        ' row with names (E11..)
Private Const OUTFOLDER_CELL As String = "C1"
Private Const FIRST_NAME_COL As Long = 5    ' E = 5
Private Const FILE_PREFIX As String = "Entity_DBA_Trade_AKA_FKA_Name_"
Private Const OWLS_BASE As String = "https://47971ow-src-p.bankofamerica.com/owls?q="
' -------------------------------------------

' DevTools port
Private Const CDP_PORT As Long = 9222

' ====== PUBLIC ENTRY ======
Public Sub Entity_DBA_Trade_AKA_FKA_Name_ALL()
    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(SHEET_NAME)
    Dim outFolder As String: outFolder = Trim$(ws.Range(OUTFOLDER_CELL).Value)
    If Len(outFolder) = 0 Then
        MsgBox "Please put the output folder path in " & SHEET_NAME & "!" & OUTFOLDER_CELL, vbExclamation
        Exit Sub
    End If
    If Right$(outFolder, 1) <> "\" Then outFolder = outFolder & "\"
    If Dir(outFolder, vbDirectory) = "" Then MkDir outFolder
    
    ' Start Edge/Chrome with CDP
    StartBrowserWithCDP
    
    Dim lastCol As Long, c As Long, nm As String
    Dim url As String, pdfPath As String, targetId As String
    
    lastCol = ws.Cells(NAMES_ROW, ws.Columns.Count).End(xlToLeft).Column
    If lastCol < FIRST_NAME_COL Then
        MsgBox "No names found in row " & NAMES_ROW & " from column E onward.", vbExclamation
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    For c = FIRST_NAME_COL To lastCol
        nm = Trim$(ws.Cells(NAMES_ROW, c).Value)
        If nm = "" Then Exit For
        
        targetId = CreateTab("about:blank")
        url = OWLS_BASE & URLEncode(nm)
        Navigate targetId, url
        WaitMs 2500
        
        pdfPath = outFolder & FILE_PREFIX & CleanFileName(nm) & ".pdf"
        SaveCurrentPageAsPDF targetId, pdfPath, 1#, True
        CloseTarget targetId
    Next c
    Application.ScreenUpdating = True
    
    MsgBox "Done. PDFs saved to: " & outFolder, vbInformation
End Sub

' ================= BROWSER LIFECYCLE =================
Private Sub StartBrowserWithCDP()
    If IsCDPAlive Then Exit Sub
    
    Dim exe As String: exe = FindBrowserPath()
    If exe = "" Then
        MsgBox "Neither Edge nor Chrome was found. Please install one.", vbCritical
        End
    End If
    
    Dim cmd As String
    cmd = """" & exe & """ --remote-debugging-port=" & CDP_PORT & _
          " --user-data-dir=""%LOCALAPPDATA%\CDP_VBA_Profile"" --no-first-run --no-default-browser-check"
    Shell cmd, vbNormalFocus
    
    Dim t As Single: t = Timer
    Do While Not IsCDPAlive
        DoEvents
        If Timer - t > 8 Then Exit Do
    Loop
End Sub

Private Function FindBrowserPath() As String
    ' Try common Edge paths, then Chrome, then exe name on PATH
    Dim p As String
    p = "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
    If Dir(p, vbNormal) <> "" Then FindBrowserPath = p: Exit Function
    p = "C:\Program Files\Microsoft\Edge\Application\msedge.exe"
    If Dir(p, vbNormal) <> "" Then FindBrowserPath = p: Exit Function
    p = "C:\Program Files\Google\Chrome\Application\chrome.exe"
    If Dir(p, vbNormal) <> "" Then FindBrowserPath = p: Exit Function
    p = "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
    If Dir(p, vbNormal) <> "" Then FindBrowserPath = p: Exit Function
    FindBrowserPath = "msedge.exe" ' hope it's on PATH; else chrome.exe
End Function

Private Function IsCDPAlive() As Boolean
    On Error GoTo e
    IsCDPAlive = (Len(HttpGet("http://127.0.0.1:" & CDP_PORT & "/json/version")) > 0)
    Exit Function
e:
    IsCDPAlive = False
End Function

' ================== CDP PRIMITIVES ==================
Private Function CreateTab(initialUrl As String) As String
    Dim resp As String
    resp = HttpGet("http://127.0.0.1:" & CDP_PORT & "/json/new?url=" & URLEncode(initialUrl))
    CreateTab = JsonPick(resp, "id")
End Function

Private Sub CloseTarget(targetId As String)
    Call HttpGet("http://127.0.0.1:" & CDP_PORT & "/json/close/" & targetId)
End Sub

Private Sub Navigate(targetId As String, url As String)
    CDPSend targetId, "Page.enable", "{}"
    CDPSend targetId, "Runtime.enable", "{}"
    CDPSend targetId, "Page.navigate", "{""url"":" & JsonStr(url) & "}"
End Sub

Private Sub SaveCurrentPageAsPDF(targetId As String, filePath As String, _
                                 Optional scale As Double = 1#, Optional printBackground As Boolean = True)
    Dim resp As String, b64 As String, params As String
    params = "{""scale"":" & Replace(CStr(scale), ",", ".") & _
             ",""printBackground"":" & LCase$(CStr(printBackground)) & _
             ",""landscape"":false,""paperWidth"":8.27,""paperHeight"":11.69}"
    resp = CDPSend(targetId, "Page.printToPDF", params)
    b64 = JsonPick(resp, "data")
    If Len(b64) = 0 Then Err.Raise 5, , "printToPDF returned empty data (page may need login)."
    SaveBase64 filePath, b64
End Sub

Private Function CDPSend(targetId As String, method As String, params As String) As String
    Dim resp As String, sid As String, payload As String, outer As String
    resp = BrowserSend("Target.attachToTarget", "{""targetId"":""" & targetId & """,""flatten"":true}")
    sid = JsonPick(resp, "sessionId")
    
    payload = "{""id"":1,""method"":""" & method & """,""params"":" & params & "}"
    outer = "{""sessionId"":""" & sid & """,""message"":" & JsonStr(payload) & "}"
    resp = BrowserSend("Target.sendMessageToTarget", outer)
    
    BrowserSend "Target.detachFromTarget", "{""sessionId"":""" & sid & """}"
    CDPSend = resp
End Function

Private Function BrowserSend(method As String, params As String) As String
    Static msgId As Long
    msgId = msgId + 1
    Dim body As String
    body = "{""id"":" & msgId & ",""method"":""" & method & """,""params"":" & params & "}"
    BrowserSend = HttpPost("http://127.0.0.1:" & CDP_PORT & "/json/protocol", body, True)
End Function

' ================= HTTP & UTILITIES =================
Private Function HttpGet(url As String) As String
    Dim w As Object: Set w = CreateObject("WinHttp.WinHttpRequest.5.1")
    w.Open "GET", url, False
    w.Send
    HttpGet = w.ResponseText
End Function

Private Function HttpPost(url As String, body As String, Optional json As Boolean = True) As String
    Dim w As Object: Set w = CreateObject("WinHttp.WinHttpRequest.5.1")
    w.Open "POST", url, False
    If json Then w.SetRequestHeader "Content-Type", "application/json;charset=UTF-8"
    w.Send body
    HttpPost = w.ResponseText
End Function

Private Function JsonStr(s As String) As String
    s = Replace(s, "\", "\\")
    s = Replace(s, """", "\""")
    s = Replace(s, vbCrLf, "\n")
    s = Replace(s, vbCr, "\n")
    s = Replace(s, vbLf, "\n")
    JsonStr = """" & s & """"
End Function

Private Function JsonPick(json As String, key As String) As String
    ' picks simple "key":"value"
    Dim p As Long, q As Long
    p = InStr(1, json, """" & key & """:", vbTextCompare)
    If p = 0 Then Exit Function
    p = InStr(p + Len(key) + 3, json, """")
    q = InStr(p + 1, json, """")
    JsonPick = Mid$(json, p + 1, q - p - 1)
End Function

Private Function URLEncode(ByVal s As String) As String
    Dim i As Long, ch As String, o As String
    For i = 1 To Len(s)
        ch = Mid$(s, i, 1)
        Select Case AscW(ch)
            Case 48 To 57, 65 To 90, 97 To 122, 45, 46, 95, 126
                o = o & ch
            Case Else
                o = o & "%" & Right$("0" & Hex(AscW(ch)), 2)
        End Select
    Next
    URLEncode = o
End Function

Private Function CleanFileName(s As String) As String
    Dim bad As Variant, i As Long
    bad = Array("\", "/", ":", "*", "?", """", "<", ">", "|")
    For i = LBound(bad) To UBound(bad)
        s = Replace(s, bad(i), "_")
    Next
    CleanFileName = s
End Function

Private Sub SaveBase64(path As String, b64 As String)
    Dim stm As Object, bytes() As Byte
    bytes = Base64Decode(b64)
    Set stm = CreateObject("ADODB.Stream")
    With stm
        .Type = 1: .Open
        .Write bytes
        .SaveToFile path, 2
        .Close
    End With
End Sub

Private Function Base64Decode(ByVal sB64 As String) As Byte()
    Dim XML As Object, Node As Object
    Set XML = CreateObject("MSXML2.DOMDocument")
    Set Node = XML.createElement("b64")
    Node.DataType = "bin.base64"
    Node.Text = sB64
    Base64Decode = Node.nodeTypedValue
End Function

Private Sub WaitMs(ms As Long)
    Dim t As Single: t = Timer
    Do
        DoEvents
    Loop While (Timer - t) * 1000 < ms
End Sub
' ================= END MODULE =================
