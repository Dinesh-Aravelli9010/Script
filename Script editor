Option Explicit

' ====== USER SETTINGS ======
Private Const SHEET_NAME As String = "Sheet1"
Private Const NAMES_ROW As Long = 11      ' you were reading across row 11
Private Const START_COL As Long = 5

Private Const OWLS_BASE As String = "https://47971ow-src-p.bankofamerica.com/owls" ' keep full https://
Private Const INPUT_CSS As String = "input[name='q']"       ' adjust if different
Private Const BUTTON_CSS As String = "button[type='submit']" ' or keep Enter submit

Private Const OUT_SUBFOLDER As String = "SearchPDFs"
Private Const PROFILE_DIR As String = "Default" ' Chrome profile to reuse (cookies/SSO)
' ===============================================

Public Sub Owls_Search_With_CDP_PrintPDF()
    Dim ws As Worksheet, lastCol As Long, c As Long
    Dim q As String, url As String, pdfPath As String, outDir As String
    Dim userDataDir As String, chromePath As String
    Dim chrome As Object     ' CDPBrowser (your wrapper)
    Dim pageId As String

    Set ws = ThisWorkbook.Worksheets(SHEET_NAME)

    lastCol = ws.Cells(NAMES_ROW, ws.Columns.Count).End(xlToLeft).Column
    If lastCol < START_COL Then
        MsgBox "No names found on row " & NAMES_ROW & ".", vbExclamation
        Exit Sub
    End If

    chromePath = GetChromeExePath()
    If chromePath = "" Then
        MsgBox "Chrome not found.", vbCritical
        Exit Sub
    End If

    userDataDir = Environ$("LOCALAPPDATA") & "\Google\Chrome\User Data"

    ' --- 1) Launch Chrome via CDP with your profile (avoids blank/SSO issues)
    Set chrome = CreateObject("CDPBrowser")           ' your wrapper class/progID
    ' Common signature: Start chrome with debugging port + profile
    ' Map to your wrapper's start/launch call:
    '   .Start chromePath, remoteDebugPort, userDataDir, profileName, headless
    chrome.Start chromePath, 9222, userDataDir, PROFILE_DIR, False

    ' --- 2) New page and activate it (fixes about:blank target issues)
    pageId = chrome.NewPage("about:blank")            ' returns target/page id
    chrome.ActivatePage pageId

    outDir = ThisWorkbook.Path & "\" & OUT_SUBFOLDER
    EnsureFolder outDir

    For c = START_COL To lastCol
        q = Trim$(CStr(ws.Cells(NAMES_ROW, c).Value))
        If Len(q) = 0 Then GoTo NextName

        ' --- 3) Navigate to OWLS (base page first, then set q and submit)
        chrome.Navigate pageId, OWLS_BASE              ' e.g., https://.../owls
        WaitForDomReady chrome, pageId, 30000          ' <= **CRITICAL**: wait

        ' --- 4) Type name into the box and submit
        If Not chrome.ElementExists(pageId, INPUT_CSS) Then
            ' sometimes the page is a redirect; reload once
            chrome.Reload pageId
            WaitForDomReady chrome, pageId, 30000
        End If

        ' set value and submit (two safe options)
        chrome.SetValueByQuery pageId, INPUT_CSS, q            ' wrapper: value = q
        ' EITHER press Enter on the input:
        chrome.DispatchKeyByQuery pageId, INPUT_CSS, 13        ' 13 = Enter
        ' OR click the button (uncomment if your site needs a click)
        'chrome.ClickByQuery pageId, BUTTON_CSS

        ' --- 5) Wait for results to load (URL/DOM changes)
        WaitForDomReady chrome, pageId, 30000

        ' --- 6) Print current page to PDF via CDP (no separate headless process)
        pdfPath = outDir & "\" & Left$(SafeFileName(q), 150) & ".pdf"
        PrintCurrentPageToPDF chrome, pageId, pdfPath

NextName:
        DoEvents
    Next c

    chrome.CloseAllPages
    chrome.Quit

    Shell "explorer.exe " & """" & outDir & """", vbNormalFocus
    MsgBox "Done. PDFs in: " & outDir, vbInformation
End Sub

' ====== CDP UTILITIES ======
Private Sub WaitForDomReady(ByVal chrome As Object, ByVal pageId As String, ByVal timeoutMs As Long)
    Dim t0 As Single: t0 = Timer
    Do
        ' Many wrappers expose Page.loadEventFired / Network.loadingFinished or a helper like IsDomReady
        If chrome.IsDomReady(pageId) Then Exit Sub

        ' Fallback: poll document.readyState
        If chrome.Evaluate(pageId, "document.readyState") = "complete" Then Exit Sub

        DoEvents
        If (Timer - t0) * 1000 > timeoutMs Then Exit Do
    Loop
End Sub

Private Sub PrintCurrentPageToPDF(ByVal chrome As Object, ByVal pageId As String, ByVal pdfPath As String)
    Dim b64 As String
    On Error Resume Next
    If Len(Dir$(pdfPath, vbNormal)) > 0 Then Kill pdfPath
    On Error GoTo 0

    ' Most CDP wrappers expose Page.printToPDF -> base64 string
    b64 = chrome.PrintToPDF(pageId, True, False, 1#)  ' (printBackground, landscape, scale)
    If Len(b64) > 0 Then SaveBase64ToFile b64, pdfPath
End Sub

' ====== GENERIC HELPERS ======
Private Function GetChromeExePath() As String
    Dim p As String
    p = Environ$("ProgramFiles") & "\Google\Chrome\Application\chrome.exe"
    If FileExists(p) Then GetChromeExePath = p: Exit Function
    p = Environ$("ProgramFiles(x86)") & "\Google\Chrome\Application\chrome.exe"
    If FileExists(p) Then GetChromeExePath = p: Exit Function
    GetChromeExePath = vbNullString
End Function

Private Function FileExists(ByVal fullPath As String) As Boolean
    On Error Resume Next
    FileExists = (Len(Dir$(fullPath, vbNormal)) > 0)
    On Error GoTo 0
End Function

Private Sub EnsureFolder(ByVal folderPath As String)
    If Len(Dir$(folderPath, vbDirectory)) = 0 Then MkDir folderPath
End Sub

Private Function SafeFileName(ByVal s As String) As String
    Dim bad, i As Long, r As String
    r = Trim$(s)
    bad = Array("\", "/", ":", "*", "?", """", "<", ">", "|")
    For i = LBound(bad) To UBound(bad)
        r = Replace$(r, CStr(bad(i)), "_")
    Next i
    If Len(r) = 0 Then r = "Search"
    SafeFileName = r
End Function

' Save CDP Page.printToPDF base64 -> file
Private Sub SaveBase64ToFile(ByVal b64 As String, ByVal path As String)
    Dim bytes() As Byte
    bytes = Base64Decode(b64)
    Dim ff As Integer: ff = FreeFile
    Open path For Binary As #ff
    Put #ff, , bytes
    Close #ff
End Sub

' Simple base64 decoder (late-bound ADODB)
Private Function Base64Decode(ByVal b64 As String) As Byte()
    Dim xml As Object, node As Object
    Set xml = CreateObject("MSXML2.DOMDocument")
    Set node = xml.createElement("tmp")
    node.DataType = "bin.base64"
    node.Text = b64
    Base64Decode = node.nodeTypedValue
End Function
