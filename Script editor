Option Explicit

' =========================
' SETTINGS â€“ EDIT THESE
' =========================
Private Const SHEET_NAME As String = "Sheet1"
Private Const NAME_COL As Long = 1                    ' Column A with names

Private Const SITE_URL As String = "https://your-owls-site.example/search"  ' <-- your page
Private Const TABS_BEFORE_INPUT As Long = 1           ' Adjust to reach the name input
Private Const SUBMIT_KEY As String = "~"              ' "~" = Enter, or try "{SPACE}" if needed
Private Const PAGE_LOAD_WAIT As Double = 4.0          ' Seconds to wait after submit

' Open Explorer at the end
Private Const OPEN_FOLDER_AT_END As Boolean = True

' =========================
' ENTRY POINT
' =========================
Public Sub Chrome_SendKeys_Search_SavePDF()
    Dim ws As Worksheet
    Dim lastRow As Long, r As Long
    Dim q As String, url As String
    Dim outDir As String, pdfPath As String
    Dim chromePath As String

    On Error GoTo Fail

    Set ws = ThisWorkbook.Worksheets(SHEET_NAME)
    lastRow = ws.Cells(ws.Rows.Count, NAME_COL).End(xlUp).Row
    If lastRow < 1 Then
        MsgBox "No names found in " & SHEET_NAME & ".", vbExclamation
        Exit Sub
    End If

    chromePath = GetChromeExePath()
    If Len(chromePath) = 0 Then
        MsgBox "Google Chrome (chrome.exe) not found.", vbCritical
        Exit Sub
    End If

    outDir = ThisWorkbook.Path & "\SearchPDFs"
    EnsureFolder outDir

    ' Launch Chrome once (visible) to about:blank so we can drive it
    Shell """" & chromePath & """ ""about:blank""", vbNormalFocus
    WaitSeconds 1.2
    AppActivateChrome

    For r = 1 To lastRow
        q = Trim$(CStr(ws.Cells(r, NAME_COL).Value))
        If Len(q) = 0 Then GoTo NextRow

        ' 1) Navigate to the site
        AppActivateChrome
        SendKeys "^{l}", True                    ' Ctrl+L -> focus address bar
        WaitSeconds 0.15
        SendKeys SITE_URL, True
        WaitSeconds 0.05
        SendKeys "~", True                       ' Enter to navigate
        WaitSeconds 2.0                          ' Give initial page time to render

        ' 2) TAB to the input (tune TABS_BEFORE_INPUT), paste the name, submit
        SendTabs TABS_BEFORE_INPUT
        PutOnClipboard q
        SendKeys "^v", True                      ' paste the name
        WaitSeconds 0.1
        SendKeys SUBMIT_KEY, True                ' Enter (or Space) to submit
        WaitSeconds PAGE_LOAD_WAIT               ' wait for results page to load

        ' 3) Copy the current URL from the address bar
        AppActivateChrome
        SendKeys "^{l}", True
        WaitSeconds 0.1
        SendKeys "^c", True
        WaitSeconds 0.1
        url = GetClipboardText()

        ' 4) Save that URL as PDF using Chrome headless
        If Len(url) > 0 Then
            pdfPath = outDir & "\" & Left$(SafeFileName(q), 150) & ".pdf"
            PrintUrlToPdf_Chrome chromePath, url, pdfPath
            WaitForFile pdfPath, 12
        End If

        ' 5) Optional: close the tab to keep Chrome tidy
        AppActivateChrome
        SendKeys "^{w}", True
        WaitSeconds 0.2

NextRow:
        DoEvents
    Next r

    If OPEN_FOLDER_AT_END Then Shell "explorer.exe " & """" & outDir & """", vbNormalFocus
    MsgBox "Done! PDFs saved to:" & vbCrLf & outDir, vbInformation
    Exit Sub

Fail:
    MsgBox "Error " & Err.Number & ": " & Err.Description, vbCritical
End Sub

' =========================
' Chrome Headless PDF save
' =========================
Private Sub PrintUrlToPdf_Chrome(ByVal chromePath As String, ByVal url As String, ByVal pdfPath As String)
    Dim cmd As String
    On Error Resume Next
    If Len(Dir$(pdfPath, vbNormal)) > 0 Then Kill pdfPath
    On Error GoTo 0

    cmd = """" & chromePath & """" & _
          " --headless=new --disable-gpu --no-sandbox" & _
          " --print-to-pdf=" & """" & pdfPath & """" & _
          " " & """" & url & """"

    Shell cmd, vbHide
End Sub

' =========================
' Window focus & SendKeys helpers
' =========================
Private Sub AppActivateChrome()
    On Error Resume Next
    AppActivate "Google Chrome"
    On Error GoTo 0
    WaitSeconds 0.15
End Sub

Private Sub SendTabs(ByVal n As Long)
    Dim i As Long
    For i = 1 To n
        SendKeys "{TAB}", True
        WaitSeconds 0.05
    Next i
End Sub

Private Sub WaitSeconds(ByVal s As Double)
    Dim t As Date
    t = Now + (s / 86400#)
    Do While Now < t
        DoEvents
    Loop
End Sub

Private Sub WaitForFile(ByVal fullPath As String, ByVal maxSeconds As Long)
    Dim deadline As Date
    deadline = Now + TimeSerial(0, 0, maxSeconds)
    Do
        If Len(Dir$(fullPath, vbNormal)) > 0 Then Exit Sub
        DoEvents
        WaitSeconds 0.2
    Loop While Now < deadline
End Sub

' =========================
' Clipboard helpers (no refs)
' =========================
Private Sub PutOnClipboard(ByVal s As String)
    Dim oData As Object
    Set oData = CreateObject("Forms.DataObject")
    oData.SetText s
    oData.PutInClipboard
End Sub

Private Function GetClipboardText() As String
    Dim oData As Object
    On Error GoTo EH
    Set oData = CreateObject("Forms.DataObject")
    oData.GetFromClipboard
    GetClipboardText = oData.GetText
    Exit Function
EH:
    GetClipboardText = vbNullString
End Function

' =========================
' Paths / Files
' =========================
Private Function GetChromeExePath() As String
    Dim p As String
    p = Environ$("ProgramFiles") & "\Google\Chrome\Application\chrome.exe"
    If FileExists(p) Then GetChromeExePath = p: Exit Function
    p = Environ$("ProgramFiles(x86)") & "\Google\Chrome\Application\chrome.exe"
    If FileExists(p) Then GetChromeExePath = p: Exit Function
    GetChromeExePath = vbNullString
End Function

Private Function FileExists(ByVal fullPath As String) As Boolean
    On Error Resume Next
    FileExists = (Len(Dir$(fullPath, vbNormal)) > 0)
    On Error GoTo 0
End Function

Private Sub EnsureFolder(ByVal folderPath As String)
    If Len(Dir$(folderPath, vbDirectory)) = 0 Then MkDir folderPath
End Sub

Private Function SafeFileName(ByVal s As String) As String
    Dim bad As Variant, i As Long, r As String
    r = Trim$(s)
    bad = Array("\", "/", ":", "*", "?", """", "<", ">", "|")
    For i = LBound(bad) To UBound(bad)
        r = Replace$(r, CStr(bad(i)), "_")
    Next i
    If Len(r) = 0 Then r = "Search"
    SafeFileName = r
End Function
